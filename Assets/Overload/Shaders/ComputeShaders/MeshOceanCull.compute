//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------
#include "UnityCG.cginc"
#include "Assets/Overload/Shaders/Utils/MeshOcean.hlsl"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------
#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
cbuffer CB {
    OCEAN_DATA
    float4x4 _cameraVP;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
RWStructuredBuffer<uint> _indirectArgs;
OCEAN_MODEL_MATRICES_BUFFER

//--------------------------------------------------------------------------------------
// Ocean Cull Compute Shader
//--------------------------------------------------------------------------------------
bool frustumCull(float2 worldPos2D) {
    // calculate bounds
    const float halfUnitSize = _oceanUnitSize*0.5;
    const float startX = worldPos2D.x;
    const float startZ = worldPos2D.y;

    const float minX = startX - halfUnitSize;
    const float maxX = startX + halfUnitSize;
    const float minZ = startZ - halfUnitSize;
    const float maxZ = startZ + halfUnitSize;
    // ocean height is calculated in another pass; therefore, max bounds are used.
    const float minY = _oceanCenter.y;
    const float maxY = minY + _oceanMaxHeight;

    const uint BOUND_COUNT = 8;
    const float4 bounds[BOUND_COUNT] = {
        float4(minX,minY,minZ,1),
        float4(minX,minY,maxZ,1),
        float4(minX,maxY,minZ,1),
        float4(minX,maxY,maxZ,1),
        float4(maxX,minY,minZ,1),
        float4(maxX,minY,maxZ,1),
        float4(maxX,maxY,minZ,1),
        float4(maxX,maxY,maxZ,1)
    }; 

    // find clip space min and max
    float3 pMin = float3(2,2,2);
    float3 pMax = float3(-2,-2,-2);
    for(uint i = 0; i < BOUND_COUNT; ++i){
        float4 p  = mul(_cameraVP, bounds[i]);
        p.w = max(p.w,0); 
        p /= p.w; // TODO: dividing by zero yield infinity (or nan)
        pMin = min(p.xyz,pMin);
        pMax = max(p.xyz,pMax);
    }

    const bool isCulled = (pMin.z > 1) || (pMin.x > +1) || (pMin.y > +1) || (pMax.z < 0) || (pMax.x < -1) || (pMax.y < -1);
    return isCulled;
}

[numthreads(32,32,1)]
void CSMain (uint2 id : SV_DispatchThreadID) {
    if(id.x > _oceanDimension || id.y > _oceanDimension) return;

    uint instanceID = convertIndex2Dto1D(id, _oceanDimension);

    // calculate world pos 2D
    uint2 unitPos = oceanCalculateUnitPosition(id, _oceanDimension, _oceanUnitSize, _oceanFluxOffset);
    const float2 worldPos2D = oceanCalculatePos2DWorld(unitPos, _oceanDimension, _oceanUnitSize, _oceanFluxOffset, _oceanCenter);

    // if(frustumCull(worldPos2D)) return;

    // instance update
    uint instanceIndex;
    InterlockedAdd(_indirectArgs[1], 1, instanceIndex);

    // update per instance data
    //
    // Note: It is not the responsibility of the culling pass to set per-instance data.
    //       However, since worldPos2D is calculated during the cull pass (to avoid an extra pass),
    //       it can be directly passed to the model matrices.
    _oceanModelMatrices[instanceIndex].model[0][3] = worldPos2D.x;      // position x
    _oceanModelMatrices[instanceIndex].model[2][3] = worldPos2D.y;      // position z

    OCEAN_ENCODE_INSTANCE_UNIT_POSITION(instanceIndex, unitPos)    
}