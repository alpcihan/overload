#include "UnityCG.cginc"

#pragma kernel CSMain

struct Models {
    float4x4 model;
    float4x4 modelInverse;
};

int _oceanDimension;
float _unitSize;
float _maxHeight;
float4x4 _cameraVP;

// Texture2D<float4> _sceneDepth;
RWStructuredBuffer<uint> _indirectArgs;
RWStructuredBuffer<Models> _modelMatrices;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x > _oceanDimension || id.y > _oceanDimension) return;

    // calculate bounds (TODO: currently assumes objects are cubes and centered at 0,0,0 with no rotation, generalize)
    const float startU = -_oceanDimension * 0.5; // start position (unit)
    const float startX = (startU + id.x - 0.5) * _unitSize;
    const float startZ = (startU + id.y - 0.5) * _unitSize;

    const float minX = startX;
    const float maxX = startX + _unitSize;
    const float minY = 0;
    const float maxY = _maxHeight;
    const float minZ = startZ;
    const float maxZ = startZ + _unitSize; // worst case scenario

    const uint BOUND_COUNT = 8;
    const float4 bounds[BOUND_COUNT] = {
        float4(minX,minY,minZ,1),
        float4(minX,minY,maxZ,1),
        float4(minX,maxY,minZ,1),
        float4(minX,maxY,maxZ,1),
        float4(maxX,minY,minZ,1),
        float4(maxX,minY,maxZ,1),
        float4(maxX,maxY,minZ,1),
        float4(maxX,maxY,maxZ,1)
    }; 

    // find clip space min and max
    float3 pMin = float3(2,2,2);
    float3 pMax = float3(-2,-2,-2);
    for(uint i = 0; i < BOUND_COUNT; ++i){
        float4 p  = mul(_cameraVP, bounds[i]);
        p.w = max(p.w,0); 
        p /= p.w; // Dividing by zero yield infinity (or nan)
        pMin = min(p.xyz,pMin);
        pMax = max(p.xyz,pMax);
    }

    bool isCulled = (pMin.z > 1) || (pMin.x > +1) || (pMin.y > +1) || (pMax.z < 0) || (pMax.x < -1) || (pMax.y < -1);
    if(isCulled) return;

    // uint2 texCoord = (ss.xy + 1.0)*0.5*float2(1920,1080);
    // float depth = Linear01Depth(_sceneDepth[texCoord].r);
    // if(depth < ss.z) return;

    // instance update
    uint instanceIdx;
    InterlockedAdd(_indirectArgs[1], 1, instanceIdx);
    _modelMatrices[instanceIdx].model[0][0] = float(id.x);
    _modelMatrices[instanceIdx].model[1][1] = float(id.y);
}