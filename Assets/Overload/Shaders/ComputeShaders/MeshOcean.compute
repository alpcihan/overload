//--------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------
#include "Assets/Overload/Shaders/Utils/Math.hlsl"
#include "Assets/Overload/Shaders/Utils/MeshOcean.hlsl"

//--------------------------------------------------------------------------------------
// Pragmas
//--------------------------------------------------------------------------------------
#pragma kernel CSMain

//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------
cbuffer CB {
    OCEAN_DATA
    float _seed;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
StructuredBuffer<uint> _indirectArgs;
OCEAN_MODEL_MATRICES_BUFFER

//--------------------------------------------------------------------------------------
// Mesh Ocean Compute Shader
//--------------------------------------------------------------------------------------
float oceanCalculateHeightLocal(uint2 unitPos) {
    const float2 unitOffsetLocal = (_oceanWaveFrequency * _oceanUnitSize * unitPos) / _oceanDimension;
    float h = noise(float3(
                        unitOffsetLocal,
                        _seed
                    ));
    h *= _oceanMaxHeight;

    return h;
}

[numthreads(1024,1,1)]
void CSMain (uint id : SV_DispatchThreadID) {
    if(id > _indirectArgs[1]) return;

    // calculate ocean mesh index
    uint2 unitPos;
    OCEAN_DECODE_INSTANCE_UNIT_POSITION(id, unitPos);

    // calculate transform
    const float heightLocal = oceanCalculateHeightLocal(unitPos);
    const float heightWorld = heightLocal * 0.5 + _oceanCenter.y;

    // update instance data
    _oceanModelMatrices[id].model[0][0] = _oceanUnitSize;                           // scale x
    _oceanModelMatrices[id].model[1][1] = heightLocal;                              // scale y
    _oceanModelMatrices[id].model[2][2] = _oceanUnitSize;                           // scale z
    _oceanModelMatrices[id].model[1][3] = heightWorld;                              // position y

    _oceanModelMatrices[id].modelInverse = inverse(_oceanModelMatrices[id].model);  // transform inverse
}